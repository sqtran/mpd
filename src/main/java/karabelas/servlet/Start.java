package karabelas.servlet;


import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.UnavailableException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import karabelas.ContentsConstants;
import karabelas.db.DBConfigFile;
import karabelas.db.DBConnectionPool;
import karabelas.mpd.ParkingMovingInfraction;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.jolbox.bonecp.BoneCPConfig;

/*
 * Application Starts here.  Creates a static BoneCP (database connectionpool)
 * Also attempts to setup log4j logger.  Haven't been successful in setting it up
 * 
 * 
 */

public class Start extends HttpServlet{

  
  static ServletContext application = null;
  
  static Logger logger = LoggerFactory.getLogger(Start.class);
  
  public void init(ServletConfig config) throws ServletException{
	  	super.init(config);
	  	application = config.getServletContext();
	  	String webAppPath = application.getRealPath("/");
	  	String strNameOfDBConfigFile = config.getInitParameter("dbconfigfile");
	  //should be a log4j.properties file in the WEB-INF directory	
	  	String log4jLocation = config.getInitParameter("log4j-properties-location");    	
	  	String pathToDBConfig = webAppPath +strNameOfDBConfigFile;
      
    	       
     	log4jLocation = webAppPath + log4jLocation;
       
     	System.out.println("LOG4J PATH IS " + log4jLocation);
        
        try{
	    	BoneCPConfig boneConfig = DBConfigFile.createBoneCPConfig(pathToDBConfig);
	    	DBConnectionPool.createDBPool(boneConfig);
	    	application.setAttribute("pool", DBConnectionPool.getDBConnectionPool()); 
	        insertDefaultMessages();
	    	//testDBConnection();
	        System.out.println("*******----*******context name is " + application.getServletContextName()+"****-----*********");
	    		
        }
	     catch(SQLException sqlExp){
	        	System.out.println("ERROR IN CREATING DB CONNECTION POOL !!!" + sqlExp.getMessage());
        }
	     catch(Exception e) {
	        	e.printStackTrace();
	        	throw new UnavailableException("Couldn't Load database driver" + e.getMessage());
	     }
    
  }

  
  //Process the HTTP Get request
  public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      	System.out.println("********************SERVICE METHOD HERE**********");
  } 

  
  
  private void insertDefaultMessages(){
	  
	  application.setAttribute("HeaderMessage", ContentsConstants.HEADERMESSAGE);
	  application.setAttribute("SecondaryMessage", ContentsConstants.SECONDARYMESSAGE);	  
	    
	  
  }
  private void testDBConnection()throws SQLException{
	  
	 
	     QueryRunner run = new QueryRunner(DBConnectionPool.getDBConnectionPool());
      
	     // Use the BeanListHandler implementation to convert all
	     // ResultSet rows into a List of Person JavaBeans.
	     ResultSetHandler<List<ParkingMovingInfraction>> h = new BeanListHandler<ParkingMovingInfraction>(ParkingMovingInfraction.class);

	     // Execute the SQL statement and return the results in a List of
	     // Person objects generated by the BeanListHandler.
	      List<ParkingMovingInfraction> lstOfInfractions = run.query("SELECT * FROM parkingmovinginfractions", h);

	       System.out.println("Size of List is " + lstOfInfractions.size());
	       System.out.println(lstOfInfractions.toString());
	       
	       ResultSetHandler<ParkingMovingInfraction> infraction = new BeanHandler<ParkingMovingInfraction>(ParkingMovingInfraction.class);
       
	    // Execute the SQL statement with one replacement parameter and
	    // return the results in a new Person object generated by the BeanHandler.
	       ParkingMovingInfraction p = run.query("SELECT * FROM parkingmovinginfractions WHERE code=?", infraction, "P168"); 
	       
	       System.out.println("Infraction for Code 168 is " + p.toString());
	  
	  
  }
} //END Start servlet